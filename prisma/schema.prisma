// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Voor email/password login
  role          String    @default("FREE") // FREE, PREMIUM, ADMIN
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  queries       Query[]
  dailyUsage    DailyUsage[]

  @@index([email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Rate limiting model
model DailyUsage {
  id        String   @id @default(cuid())
  userId    String
  date      String   // YYYY-MM-DD format
  count     Int      @default(0)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, date])
  @@index([date])
}

// Updated Query model with user relations
model Query {
  id         String   @id @default(cuid())
  question   String
  answer     String
  sources    String   @default("") // JSON string of array
  profession String   @default("burger")
  userId     String?  // Optional for anonymous users
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt  DateTime @default(now())

  @@index([createdAt])
  @@index([userId, createdAt])
}

// === NIEUWE MODELLEN VOOR OFFICIÃ‹LE JURIDISCHE BRONNEN ===

// Juridische documenten met vector embeddings voor RAG
model LegalDocument {
  id          String   @id @default(cuid())
  bron        String   // wettenbank, rechtspraak, eur-lex, etc.
  type        String   // wet, uitspraak, richtlijn, etc.
  titel       String
  tekst       String   @db.Text
  uri         String   @unique
  datum       DateTime?
  artikelNr   String?  // Voor wetsartikelen
  ecliNr      String?  // Voor rechtspraak
  status      String   @default("ACTIVE") // ACTIVE, SUPERSEDED, DELETED
  
  // Metadata
  wetboek     String?  // Sr, BW, WVW, etc.
  rechtsgebied String? // strafrecht, civielrecht, etc.
  
  // Vector embedding (stored as JSON for now, later pgvector)
  embedding   String?  @db.Text // JSON array van floats
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastFetched DateTime @default(now())

  @@index([bron, type])
  @@index([wetboek])
  @@index([rechtsgebied])
  @@index([datum])
  @@index([status])
  @@index([titel])
  @@index([tekst])
}

// Boetes en feitcodes
model Boete {
  id          String   @id @default(cuid())
  feitcode    String   @unique
  omschrijving String
  categorie   String   // A, B, C, etc.
  bedrag      Int      // In eurocenten
  punten      Int?     // Strafpunten
  
  // Juridische basis
  wetsartikel String?
  wetboek     String?
  
  // Metadata
  geldigVan   DateTime
  geldigTot   DateTime?
  status      String   @default("ACTIVE")
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([categorie])
  @@index([bedrag])
  @@index([status])
  @@index([geldigVan, geldigTot])
}

// Jurisprudentie met ECLI nummers
model Jurisprudentie {
  id          String   @id @default(cuid())
  ecli        String   @unique
  titel       String
  samenvatting String? @db.Text
  volledigeTekst String @db.Text
  
  // Rechtbank info
  instantie   String   // HR, Hof, Rechtbank, etc.
  datum       DateTime
  uitspraakType String // arrest, vonnis, beschikking
  
  // Juridische classificatie
  rechtsgebied String[]
  trefwoorden String[]
  
  // Relaties
  wetsartikelen String[] // Geciteerde artikelen
  
  // Vector embedding
  embedding   String?  @db.Text
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([instantie])
  @@index([datum])
  @@index([rechtsgebied])
  @@index([titel])
  @@index([samenvatting])
}

// Parlementaire stukken
model ParlementairStuk {
  id          String   @id @default(cuid())
  nummer      String   @unique // Kamerstuknummer
  titel       String
  type        String   // wetsvoorstel, motie, amendement, etc.
  tekst       String   @db.Text
  
  // Metadata
  kamer       String   // TK, EK
  vergaderjaar String
  datum       DateTime
  status      String   // ingediend, aangenomen, verworpen, etc.
  
  // Relaties
  indieners   String[] // Namen van indieners
  onderwerp   String?
  
  // Vector embedding
  embedding   String?  @db.Text
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([type])
  @@index([kamer])
  @@index([vergaderjaar])
  @@index([datum])
  @@index([status])
}

// Data ingestie logs
model DataIngestLog {
  id          String   @id @default(cuid())
  bron        String   // wettenbank, rechtspraak, etc.
  type        String   // full_sync, incremental, manual
  status      String   // running, completed, failed
  
  // Statistieken
  documentsProcessed Int @default(0)
  documentsAdded     Int @default(0)
  documentsUpdated   Int @default(0)
  documentsDeleted   Int @default(0)
  
  // Timing
  startedAt   DateTime @default(now())
  completedAt DateTime?
  duration    Int?     // In seconden
  
  // Error handling
  errorMessage String? @db.Text
  
  createdAt   DateTime @default(now())

  @@index([bron, type])
  @@index([status])
  @@index([startedAt])
} 