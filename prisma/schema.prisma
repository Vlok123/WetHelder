// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Voor email/password login
  role          String    @default("user")
  isBlocked     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  questions     Question[]
  favorites     Favorite[]
  dailyUsage    DailyUsage[]
  queries       Query[]
  userFavorites UserFavorite[]
  
  // Nieuwe relaties
  notifications        Notification[]
  notificationSettings NotificationSetting?
  activityLogs        ActivityLog[]
  savedAangiftes      SavedAangifte[]
  
  // Bestaande relaties
  notes         UserNote[]
  categories    UserCategory[]
  searchHistory UserSearchHistory[]
  adminLogs     AdminLog[] @relation("AdminLogs")

  @@index([email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Rate limiting model
model DailyUsage {
  id        String   @id @default(cuid())
  userId    String
  date      String   // YYYY-MM-DD format
  count     Int      @default(0)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, date])
  @@index([date])
}

// Updated Query model with user relations
model Query {
  id         String   @id @default(cuid())
  question   String
  answer     String
  sources    String   @default("") // JSON string of array
  profession String   @default("burger")
  userId     String?  // Optional for anonymous users
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Nieuwe relaties
  notes      UserNote[]
  categories CategoryQuery[]
  favorites  UserFavorite[]
  
  createdAt  DateTime @default(now())

  @@index([createdAt])
  @@index([userId, createdAt])
}

// === NIEUWE MODELLEN VOOR OFFICIËLE JURIDISCHE BRONNEN ===

// Juridische documenten met vector embeddings voor RAG
model LegalDocument {
  id          String   @id @default(cuid())
  bron        String   // wettenbank, rechtspraak, eur-lex, etc.
  type        String   // wet, uitspraak, richtlijn, etc.
  titel       String
  tekst       String
  uri         String   @unique
  datum       DateTime?
  artikelNr   String?  // Voor wetsartikelen
  ecliNr      String?  // Voor rechtspraak
  status      String   @default("ACTIVE") // ACTIVE, SUPERSEDED, DELETED
  
  // Metadata
  wetboek     String?  // Sr, BW, WVW, etc.
  rechtsgebied String? // strafrecht, civielrecht, etc.
  
  // Vector embedding (stored as JSON for now, later pgvector)
  embedding   String? // JSON array van floats
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastFetched DateTime @default(now())

  @@index([bron, type])
  @@index([wetboek])
  @@index([rechtsgebied])
  @@index([datum])
  @@index([status])
  @@index([titel])
  @@index([tekst])
}

// Boetes en feitcodes
model Boete {
  id          String   @id @default(cuid())
  feitcode    String   @unique
  omschrijving String
  categorie   String   // A, B, C, etc.
  bedrag      Int      // In eurocenten
  punten      Int?     // Strafpunten
  
  // Juridische basis
  wetsartikel String?
  wetboek     String?
  
  // Metadata
  geldigVan   DateTime
  geldigTot   DateTime?
  status      String   @default("ACTIVE")
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([categorie])
  @@index([bedrag])
  @@index([status])
  @@index([geldigVan, geldigTot])
}

// Jurisprudentie met ECLI nummers
model Jurisprudentie {
  id          String   @id @default(cuid())
  ecli        String   @unique
  titel       String
  samenvatting String?
  volledigeTekst String
  
  // Rechtbank info
  instantie   String   // HR, Hof, Rechtbank, etc.
  datum       DateTime
  uitspraakType String // arrest, vonnis, beschikking
  
  // Juridische classificatie
  rechtsgebied String // JSON array
  trefwoorden String // JSON array
  
  // Relaties
  wetsartikelen String // JSON array - Geciteerde artikelen
  
  // Vector embedding
  embedding   String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([instantie])
  @@index([datum])
  @@index([rechtsgebied])
  @@index([titel])
  @@index([samenvatting])
}

// Parlementaire stukken
model ParlementairStuk {
  id          String   @id @default(cuid())
  nummer      String   @unique // Kamerstuknummer
  titel       String
  type        String   // wetsvoorstel, motie, amendement, etc.
  tekst       String
  
  // Metadata
  kamer       String   // TK, EK
  vergaderjaar String
  datum       DateTime
  status      String   // ingediend, aangenomen, verworpen, etc.
  
  // Relaties
  indieners   String // JSON array - Namen van indieners
  onderwerp   String?
  
  // Vector embedding
  embedding   String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([type])
  @@index([kamer])
  @@index([vergaderjaar])
  @@index([datum])
  @@index([status])
}

// Data ingestie logs
model DataIngestLog {
  id          String   @id @default(cuid())
  bron        String   // wettenbank, rechtspraak, etc.
  type        String   // full_sync, incremental, manual
  status      String   // running, completed, failed
  
  // Statistieken
  documentsProcessed Int @default(0)
  documentsAdded     Int @default(0)
  documentsUpdated   Int @default(0)
  documentsDeleted   Int @default(0)
  
  // Timing
  startedAt   DateTime @default(now())
  completedAt DateTime?
  duration    Int?     // In seconden
  
  // Error handling
  errorMessage String?
  
  createdAt   DateTime @default(now())

  @@index([bron, type])
  @@index([status])
  @@index([startedAt])
}

// === NIEUWE MODELLEN VOOR UITGEBREID LEDENDEEL EN ADMIN ===

// User notes - gebruikers kunnen notities maken bij hun vragen
model UserNote {
  id        String   @id @default(cuid())
  userId    String
  queryId   String?  // Optioneel gekoppeld aan een vraag
  title     String
  content   String
  color     String   @default("blue") // Voor visuele categorisering
  tags      String // JSON array - Vrije tags
  isPrivate Boolean  @default(true)
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  query     Query?   @relation(fields: [queryId], references: [id], onDelete: SetNull)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, createdAt])
  @@index([tags])
}

// User categories - gebruikers kunnen eigen categorieën maken
model UserCategory {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  color       String   @default("gray")
  icon        String   @default("folder")
  sortOrder   Int      @default(0)
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  queries     CategoryQuery[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, name])
  @@index([userId, sortOrder])
}

// Koppeling tussen queries en user categories
model CategoryQuery {
  id         String       @id @default(cuid())
  queryId    String
  categoryId String
  
  query      Query        @relation(fields: [queryId], references: [id], onDelete: Cascade)
  category   UserCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  createdAt  DateTime     @default(now())

  @@unique([queryId, categoryId])
  @@index([categoryId])
}

// User favorites - gebruikers kunnen vragen favoriet maken
model UserFavorite {
  id      String @id @default(cuid())
  userId  String
  queryId String
  
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  query   Query  @relation(fields: [queryId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())

  @@unique([userId, queryId])
  @@index([userId, createdAt])
}

// Search history - zoekgeschiedenis van gebruikers
model UserSearchHistory {
  id         String @id @default(cuid())
  userId     String
  searchTerm String
  profession String @default("algemeen")
  resultCount Int   @default(0)
  
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt  DateTime @default(now())

  @@index([userId, createdAt])
  @@index([searchTerm])
}

// Admin logs - voor audit trail
model AdminLog {
  id        String @id @default(cuid())
  adminId   String
  action    String // CREATE_USER, DELETE_USER, CHANGE_ROLE, VIEW_STATS, etc.
  target    String? // ID van het beïnvloede object
  details   String? // JSON details van de actie
  ipAddress String?
  userAgent String?
  
  admin     User   @relation("AdminLogs", fields: [adminId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())

  @@index([adminId, createdAt])
  @@index([action])
  @@index([createdAt])
}

// System settings - configuratie instellingen
model SystemSetting {
  id          String @id @default(cuid())
  key         String @unique
  value       String
  description String?
  category    String @default("general")
  isPublic    Boolean @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
  @@index([isPublic])
}

model Question {
  id          String    @id @default(cuid())
  content     String
  answer      String    @default("")
  isHighlight Boolean   @default(false)
  metadata    String?   @default("{}")  // JSON string for additional data like profile
  profile     String    @default("algemeen")
  anonymousIp String?   // For tracking anonymous users
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String?   // Made optional for anonymous users
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  favorites   Favorite[]

  @@index([anonymousIp, createdAt])
}

model Favorite {
  id         String   @id @default(cuid())
  userId     String
  questionId String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId])
}

// Notificatie model
model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // QUESTION_ANSWERED, FAVORITE_ADDED, SYSTEM_UPDATE, etc.
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([type])
  @@index([isRead])
}

// Notificatie instellingen per gebruiker
model NotificationSetting {
  id                    String   @id @default(cuid())
  userId                String   @unique
  emailNotifications    Boolean  @default(true)
  questionNotifications Boolean  @default(true)
  systemUpdates        Boolean  @default(true)
  favoriteNotifications Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Activiteitenlog voor gebruikers
model ActivityLog {
  id          String   @id @default(cuid())
  userId      String
  type        String   // LOGIN, QUESTION_ASKED, FAVORITE_ADDED, SETTINGS_CHANGED, etc.
  description String
  metadata    String?  // JSON string met extra informatie
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([type])
}

// Download tracking voor aangiftes en andere downloads
model DownloadTracking {
  id           String   @id @default(cuid())
  type         String   // "aangifte", "document", etc.
  delictType   String?  // Voor aangiftes: type delict
  isCustomType Boolean  @default(false) // AI-gegenereerd delicttype
  userAgent    String?  // Browser informatie
  timestamp    DateTime @default(now())
  
  @@index([type, timestamp])
  @@index([delictType])
  @@index([timestamp])
}

// Opgeslagen aangiftes van ingelogde gebruikers
model SavedAangifte {
  id                  String   @id @default(cuid())
  userId              String
  delictType          String   // Type delict
  antwoorden          String   // JSON string van antwoorden
  vrijeTekst          String   // Vrije tekst van gebruiker
  gegenereerdeAangifte String  // De volledige gegenereerde aangifte
  isCustomType        Boolean  @default(false) // AI-gegenereerd delicttype
  zoekopdracht        String?  // Originele zoekopdracht bij "anders"
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, createdAt])
  @@index([delictType])
} 